# Depth of the onchain merkle tree
tree_depth = 30
# Socket address for the service to listen to for incoming inclusion proof requests
socket_address = "127.0.0.1:8080"

[db]
connection_string = "postgresql://postgres:postgres@localhost:5432/world_tree"

[cache]
# Cache file to store the tree state
dir = "tree-cache/"
# Flag to purge existing cache on startup
# purge = true

# Ethereum Mainnet configuration
[canonical_tree]
# Address of the WorldIdIdentityManager contract
address = "0xf7134CE138832c1456F2a91D64621eE90c2bddEa"
# Creation block of the WorldIdIdentityManager contract
creation_block = 17636832

[canonical_tree.provider]
# RPC endpoint
rpc_endpoint = "https://eth-mainnet.g.alchemy.com/v2/JQxnR_IdzRP3uz00lvht1FqmT7Pf268R"
# Requests per second throttle
throttle = 150
# Blockscanner window size; the maximum number of blocks to query at a time
window_size = 10000

# Note that the following bridged trees are identitified with [bridged_trees.<network>]
# however this could be any unique identifier, e.g. [bridged_trees.0], [bridged_trees.a], etc.

# OP Mainnet
[bridged_trees.optimism]
# Address of the BridgedWorldId contract
address = "0xB3E7771a6e2d7DD8C0666042B7a07C39b938eb7d"
# Creation block of the BridgedWorldId contract
creation_block = 109906421

[bridged_trees.optimism.provider]
# RPC endpoint
rpc_endpoint = "https://opt-mainnet.g.alchemy.com/v2/JQxnR_IdzRP3uz00lvht1FqmT7Pf268R"
# Requests per second throttle
throttle = 150
# Blockscanner window size; the maximum number of blocks to query at a time
window_size = 10000

# [telemetry]
# service_name = "world-tree"
